	public static double[] bucketSort(double[] array, int n) {
		double high = array[0];// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
		double low = array[0];// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function

		for (int i = 1; i < array.length; i++) { // O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount.
			if (array[i] > high)
				high = array[i];// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
			if (array[i] < low)
				low = array[i];// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
		}

		List<Double> buckets[] = new ArrayList[n];// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
		for (int i = 0; i < n; i++) { // O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount. 
			buckets[i] = new ArrayList();// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
		}

		double interval = ((double) (high - low + 1)) / n; ;// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function

		for (int i = 0; i < array.length; i++) { // O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount.
			buckets[(int) ((array[i] - low) / interval)].add((double) array[i]);// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
		}

		int pointer = 0;// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
		for (int i = 0; i < buckets.length; i++) {// O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount.
			insertionSort(buckets[i]);// O(n)* insertionSort is technically O(n^2), however since bucket size is sufficiently small we consider it as having O(n) time complexity see Analysis of Bucket Sort.docx
			for (int j = 0; j < buckets[i].size(); j++) { // O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount.
				array[pointer] = buckets[i].get(j);// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
				pointer++;// O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function
			}
		}
		return array;
	}
}
/*Thus, when input is drawn from a uniform distribution, BucketSort runs in linear time*/